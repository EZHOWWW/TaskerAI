from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from dotenv import load_dotenv
import os
import logging
import asyncio
import aiohttp
import json


class TelegramBot:
    def __init__(self, model_url: str):
        load_dotenv()
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        self.model_url = model_url
        self._register_handlers()

    def _register_handlers(self):
        self.dp.message.register(self._start, Command("start"))
        # self.dp.message.register(self._echo, F.text)
        self.dp.message.register(self._promt_to_model, Command("promt"))

    async def _start(self, message: types.Message):
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å")

    async def _echo(self, message: types.Message):
        await message.answer(f"ü§ñ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

    async def _promt_to_model(self, message: types.Message):
        system_promt = """
                    –¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. 
                    –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏, 
                    –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. """
        user_prompt = message.text
        async with aiohttp.ClientSession() as session:
            payload = {"system_promt": system_promt, "user_promt": user_prompt}

            headers = {"accept": "application/json", "Content-Type": "application/json"}

            async with session.get(
                "http://127.0.0.1:8000/model/promt",
                headers=headers,
                data=json.dumps(payload),
            ) as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status == 200:
                    # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
                    result = await response.json()
                    await message.reply(str(result))
                else:
                    error = await response.text()
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error}")

        # try:
        #     async with aiohttp.ClientSession() as session:
        #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É
        #         async with session.get(
        #             self.model_url + "/model/promt",
        #             params={
        #                 "system_promt": "hollo",
        #                 "user_promt": "hello",
        #             },
        #         ) as response:
        #             if response.status == 200:
        #                 result = await response.text()
        #                 await message.reply(result)
        #             else:
        #                 error = await response.text()
        #                 await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {error}")

        # except aiohttp.ClientConnectorError:
        #     await message.reply("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        # except Exception as e:
        #     await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _start_polling(self):
        await self.dp.start_polling(self.bot)

    def run(self):
        logging.basicConfig(level=logging.INFO)
        asyncio.run(self._start_polling())


if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
